kind: test
name: users
spec:
  steps:
    - title: Given Alice is an employer
      steps:
        - Given I am the admin
        - Given details for Alice
        - Given a password for Alice
        - Given Alice is the current user
        - Given that user is registered and logged in
    - title: Given Bob is an employee
      steps:
        - Given details for Bob
        - Given a password for Bob
        - Given Bob is the current user
        - Given I am logged out
        - Given that user is registered and logged in
    - title: Given that user is registered and logged in
      steps:
        - Given that user is registered
        - Given I forgot my password
        - Given I resetted my password
        - Given I am logged in
    - title: Given that user is registered
      steps:
        - When I register
        - Then I should have a 201
    - title: Given I forgot my password
      steps:
        - When I forget my password
        - Then I should have a 201
        - Then I should have a token
    - title: Given I resetted my password
      steps:
        - When I reset my password
        - Then I should have a 201
    - title: Given details for Alice
      alice:
        object:
          id:
            uuid: {}
          first: Alice
          last: Cooper
          email: alice@foo.bar
    - title: Given Alice is the current user
      user: @alice
    - title: Given details for Bob
      bob:
        object:
          id:
            uuid: {}
          first: Bob
          last: Marley
          email: bob@foo.bar
    - title: Given Bob is the current user
      user: @bob
    - title: When I register
      http:
        method: post
        url:
          - @baseUrl
          - /api/register
        headers:
          merge:
            - @auth
            - content-type: application/json
        body: @user
      as: latest
    - title: When I forget my password
      http:
        method: post
        url:
          - @baseUrl
          - /api/passwd/forgot
        headers:
          merge:
            - @auth
            - content-type: application/json
        body:
          email: @user.email
      as: latest
    - title: When I reset my password
      http:
        method: post
        url:
          - @baseUrl
          - /api/passwd/reset
        headers:
          merge:
            - @auth
            - content-type: application/json
        body:
          email: @user.email
          password: @password
      as: latest
    - title: Then I should have a token
      auth:
        authorization: @latest.body.token
    - title: Given a password for Alice
      password: alice123
    - title: Given a password for Bob
      password: bob123
    - title: Given I am logged in
      steps:
        - When I log in
        - Then I should have a 201
        - Then I should have a token
    - title: When I log in
      http:
        method: post
        url:
          - @baseUrl
          - /api/login
        headers:
          merge:
            - @auth
            - content-type: application/json
        body:
          email: @user.email
          password: @password
      as: latest
    - title: When I log out
      http:
        method: post
        url:
          - @baseUrl
          - /api/logout
        headers:
          merge:
            - @auth
            - content-type: application/json
        body: {}
      as: latest
    - title: When I get all users
      http:
        method: get
        url:
          - @baseUrl
          - /api/users
        headers: @auth
      as: latest
    - title: When I get that user
      http:
        method: get
        url:
          - @baseUrl
          - /api/users/
          - @user.id
        headers: @auth
      as: latest
